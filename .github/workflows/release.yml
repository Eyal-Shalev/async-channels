name: Release

on:
  push:
    tags:
      - v*

env:
  camelCaseName: asyncChannels

jobs:
  bundle:
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Deno bundle
        run: bash ./scripts/bundle.bash

      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

      - name: Make package.json
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: bash ./scripts/package-json.bash

      - uses: actions/upload-artifact@v2
        with:
          path: "artifact"

  rollup:
    name: Rollup
    runs-on: ubuntu-latest
    needs: bundle
    env:
      FORMATS: |
        es
        amd
        cjs
        iife
        umd
        system
    
    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Setup Rollup
        run: npm install --global rollup rollup-plugin-terser

      - uses: actions/download-artifact@v2
        with:
          path: "artifact"

      - name: Create Bundles
        working-directory: artifact
        run: |
          for f in $FORMATS; do rollup dist/bundle.js --file dist/"$f".bundle.js --format "$f" --name "$camelCaseName"; done
          for f in $FORMATS; do rollup dist/bundle.js --file dist/"$f".bundle.min.js --format "$f" --name "$camelCaseName" --plugin terser; done

      - uses: actions/upload-artifact@v2
        with:
          path: "artifact"

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: rollup

    steps:
      - uses: actions/download-artifact@v2
        with:
          path: artifact
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - run: npm publish
        working-directory: artifact
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: rollup

    steps:
      - name: Is pre-release
        id: is_pre
        run: echo ::set-output name=IS_PRE::"$([[ $GITHUB_REF =~ refs\/tags\/v.+-.+ ]] && echo 0 || echo 1)"
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

      - uses: actions/download-artifact@v2
        with:
          path: "artifact"

      - uses: marvinpinto/action-automatic-releases@latest
        working-directory: artifact
        if: ${{ steps.get_version.outputs.IS_PRE }}
        with:
          prerelease: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: "Version ${{ steps.get_version.outputs.VERSION }}"
          automatic_release_tag: ${{ steps.get_version.outputs.VERSION }}
          files: |
            LICENSE
            README.md
            dist/*.bundle.js
            dist/*.bundle.min.js

      - uses: marvinpinto/action-automatic-releases@latest
        working-directory: artifact
        if: ${{ ! steps.get_version.outputs.IS_PRE }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: "Version ${{ steps.get_version.outputs.VERSION }}"
          automatic_release_tag: ${{ steps.get_version.outputs.VERSION }}
          files: |
            LICENSE
            README.md
            dist/*.bundle.js
            dist/*.bundle.min.js
