name: Release

on:
  push:
    tags:
      - v*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Deno build
        run: bash ./scripts/build.bash

      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

      - name: Make GitHub package.json
        env:
          SCOPE: Eyal-Shalev
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: bash ./scripts/package-json.bash

      - uses: actions/upload-artifact@v2
        with:
          name: github-package-json
          path: package.json

      - name: Make NPM package.json
        env:
          SCOPE: eyalsh
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: bash ./scripts/package-json.bash

      - uses: actions/upload-artifact@v2
        with:
          name: npm-package-json
          path: package.json

  rollup:
    name: Rollup
    runs-on: ubuntu-latest
    needs: build
    env:
      BUNDLE_NAME: async_channels
      FORMATS: |
        es
        amd
        cjs
        iife
        umd
        system

    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Setup Rollup
        run: npm install --global rollup rollup-plugin-terser rollup-plugin-dts

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Create Bundles
        run: |
          for f in $FORMATS; do rollup dist/esm/mod.js --file dist/"$f".bundle.js --format "$f" --name "$BUNDLE_NAME"; done
          for f in $FORMATS; do rollup dist/esm/mod.js --file dist/"$f".bundle.min.js --format "$f" --name "$BUNDLE_NAME" --plugin terser; done

      - name: Create d.ts
        run: rollup dist/esm/mod.js --file dist/bundle.d.ts --format "es" --plugin dts

      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  gpr-publish:
    name: GitHub Publish
    runs-on: ubuntu-latest
    needs: rollup
    permissions:
      packages: write
      contents: read

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - uses: actions/download-artifact@v2
        with:
          name: github-package-json
          path: "."

      - uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: 'https://npm.pkg.github.com'

      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  npm-publish:
    name: NPM Publish
    runs-on: ubuntu-latest
    needs: rollup
    permissions:
      packages: write
      contents: read

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - uses: actions/download-artifact@v2
        with:
          name: npm-package-json
          path: "."

      - uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'

      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: rollup

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Is pre-release
        id: is_pre
        run: echo ::set-output name=IS_PRE::"$([[ $GITHUB_REF =~ refs\/tags\/v.+-.+ ]] && echo 0 || echo 1)"
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ steps.get_version.outputs.IS_PRE }}
        with:
          prerelease: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: "Version ${{ steps.get_version.outputs.VERSION }}"
          automatic_release_tag: ${{ steps.get_version.outputs.VERSION }}
          files: |
            LICENSE
            README.md
            dist/esm
            dist/bundle.d.ts
            dist/*.bundle.js
            dist/*.bundle.min.js

      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ ! steps.get_version.outputs.IS_PRE }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: "Version ${{ steps.get_version.outputs.VERSION }}"
          automatic_release_tag: ${{ steps.get_version.outputs.VERSION }}
          files: |
            LICENSE
            README.md
            dist/esm
            dist/*.bundle.js
            dist/*.bundle.min.js
