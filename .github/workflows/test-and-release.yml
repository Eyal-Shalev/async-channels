name: Test & Release

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    tags:
      - v*

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Verify formatting
        run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Run tests
        run: bash ./scripts/run-tests.bash

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Deno build
        run: bash ./scripts/build.bash

      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist


  rollup:
    name: Rollup
    runs-on: ubuntu-latest
    needs: build
    env:
      FORMATS: |
        esm
        amd
        cjs
        iife
        umd
        system

    steps:
      # Checkout the project for the LICENSE_HEADER file
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup Rollup
        run: npm install --global rollup@^2.57.0 rollup-plugin-terser@^7.0.2 rollup-plugin-dts@^4.0.0 rollup-plugin-license@^2.5.0 typescript

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      # The package.json is needed for the license plugin
      - name: Make fake package.json
        env:
          SCOPE: fake
          VERSION: "0.0.0"
        run: bash ./scripts/package-json.bash

      - name: Create Bundles
        run: |
          rollup dist/esm/mod.js --file "dist/${BUNDLE_NAME}.d.ts" --format "es" --plugin dts --plugin "license={banner: { content: {file: 'LICENSE_HEADER'}, commentStyle: 'ignored'}}"
          for f in $FORMATS; do rollup dist/esm/mod.js --file "dist/${BUNDLE_NAME}.$f.js" --format "$f" --name "${BUNDLE_NAME}" --plugin "license={banner: { content: {file: 'LICENSE_HEADER'}, commentStyle: 'ignored'}}"; done
          for f in $FORMATS; do rollup dist/esm/mod.js --file "dist/${BUNDLE_NAME}.$f.min.js" --format "$f" --name "${BUNDLE_NAME}" --plugin terser --plugin "license={banner: { content: {file: 'LICENSE_HEADER'}, commentStyle: 'ignored'}}"; done

      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  package-json:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps: 
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

      - name: Make GitHub package.json
        env:
          SCOPE: Eyal-Shalev
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: bash ./scripts/package-json.bash

      - uses: actions/upload-artifact@v2
        with:
          name: github-package-json
          path: package.json

      - name: Make NPM package.json
        env:
          SCOPE: eyalsh
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: bash ./scripts/package-json.bash

      - uses: actions/upload-artifact@v2
        with:
          name: npm-package-json
          path: package.json

  gpr-publish:
    name: GitHub Publish
    runs-on: ubuntu-latest
    needs: [package-json, rollup]
    if: ${{ github.event_name == 'push' }}
    permissions:
      packages: write
      contents: read

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - uses: actions/download-artifact@v2
        with:
          name: github-package-json
          path: "."

      - uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: 'https://npm.pkg.github.com'

      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  npm-publish:
    name: NPM Publish
    runs-on: ubuntu-latest
    needs: [package-json, rollup]
    if: ${{ github.event_name == 'push' }}
    permissions:
      packages: write
      contents: read

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - uses: actions/download-artifact@v2
        with:
          name: npm-package-json
          path: "."

      - uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'

      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  draft-release:
    name: Draft Release
    runs-on: ubuntu-latest
    needs: [rollup]
    if: ${{ github.event_name == 'pull_request' }}

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - uses: marvinpinto/action-automatic-releases@latest
        with:
          prerelease: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: "Draft for ${{ github.event.label.name }}"
          files: |
            LICENSE
            README.md
            dist/*.js
            dist/*.d.ts
