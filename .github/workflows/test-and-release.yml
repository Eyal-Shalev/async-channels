name: Test & Release

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches: [main]
    tags:
      - v*

env:
  BUNDLE_NAME: async_channels

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Verify formatting
        run: make fmt-check

      - name: Run linter
        run: make lint

      - name: Run tests (with coverage)
        run: make coverage

      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: true
          verbose: true

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: 'https://npm.pkg.github.com'

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install
        run: make install

      - name: Build
        run: make all

      - name: Post Build Test
        run: make post-build-test

      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  version:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Get version
        id: get_version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\/v/}
      - name: Is pre-release
        id: is_pre
        run: echo ::set-output name=IS_PRE::"$([[ $GITHUB_REF =~ refs\/tags\/v.+-.+ ]] && echo 0 || echo 1)"
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_pre: ${{ steps.is_pre.outputs.IS_PRE }}

  package-json:
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Make GitHub package.json
        env:
          SCOPE: Eyal-Shalev
          VERSION: ${{ needs.version.outputs.version }}
        run: make package-json

      - uses: actions/upload-artifact@v2
        with:
          name: github-package-json
          path: package.json

      - name: Make NPM package.json
        env:
          SCOPE: eyalsh
          VERSION: ${{ needs.version.outputs.version }}
        run: make package-json

      - uses: actions/upload-artifact@v2
        with:
          name: npm-package-json
          path: package.json

  gpr-publish:
    name: GitHub Publish
    runs-on: ubuntu-latest
    needs: [test, build, package-json]
    permissions:
      packages: write
      contents: read

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - uses: actions/download-artifact@v2
        with:
          name: github-package-json
          path: "."

      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: 'https://npm.pkg.github.com'

      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  npm-publish:
    name: NPM Publish
    runs-on: ubuntu-latest
    needs: [test, build, package-json]
    permissions:
      packages: write
      contents: read

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - uses: actions/download-artifact@v2
        with:
          name: npm-package-json
          path: "."

      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: 'https://registry.npmjs.org'

      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build, version]

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ needs.version.outputs.is_pre }}
        with:
          prerelease: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: Version ${{ needs.version.outputs.version }}
          automatic_release_tag: ${{ needs.version.outputs.version }}
          files: |
            LICENSE
            README.md
            dist/*.js
            dist/*.js

      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ ! needs.version.outputs.is_pre }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: Version ${{ needs.version.outputs.version }}
          automatic_release_tag: ${{ needs.version.outputs.version }}
          files: |
            LICENSE
            README.md
            dist/*.js
            dist/*.js
